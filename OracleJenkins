node {
    // Variables to set
   
 
    stage ('SCM Checkout') {
        echo "Ensure the pipeline is configured to clean the Jenkins workspace before checkout"
        bat('set')
        deleteDir()
        checkout scm
    }
 
    stage ('Code Analysis') {
        echo "Migrating the project to a cleaned CI database; Running Code Analysis for Oracle; Checking for Invalid Objects"

    }
     
    stage ('Unit Tests') {
        echo "Running utPLSQL database Unit Tests"
      
    }
     
    stage ('Compile Form') {
        echo "Provisioning a copy of the current Production database"


    }
     
    stage ('Connect to App server') {
        echo "Generating deployment script against Acceptance; Doing drift detection; Creating changes report"
 
    }
     
    stage ('Deploy to App Server') {
        echo "Deploying release to Acceptance database for user and performance testing"

    }
     
    stage ('Approval Gate'){
        def message = "Approve release to Production?"
 	
        // wrapping in a time out so it does not block the agent and simply fails the build if there is no user intervention.
        timeout(time: 30, unit: 'MINUTES') {
            def userInput = input(
                id: 'userInput',
                message: "$message",
                parameters: [
                  [$class: 'TextParameterDefinition', defaultValue: 'I Approve The Deployment', description: 'To Proceed, type I Approve The Deployment', name: 'Review deployment artifacts before proceeding']
                ]
            )
 
            if (userInput.indexOf('I Approve The Deployment') == -1) {
                currentBuild.result = 'ABORTED'
                error('Deployment aborted')
            }
        }
    }
     
    stage ('Deploy to Production') {
        echo "Deploying release to Production database"
 
    }
}
