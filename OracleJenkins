node('master') {
    // Variables to set
   
 
    stage ('SCM Checkout') {
        echo "Ensure the pipeline is configured to clean the Jenkins workspace before checkout"
        git branch: 'main', changelog: false, poll: false, url: 'https://github.com/akilagithub/OracleTechVersant.git'
    }
}
node('oracleapps'){
    stage ('copying form to APPS TOP') {
        echo "Copying fmb from cloned location to respective top location"
        sh '''
           echo "hello" 
           ls
           pwd
        '''
    }
    stage ('Code Analysis') {
        sh 'git clone https://github.com/akilagithub/OracleTechVersant.git'
       /* echo "Migrating the project to a cleaned CI database; Running Code Analysis for Oracle; Checking for Invalid Objects"
            withEnv(["JAVA_HOME=$JavaHome"]) {      
                  withSonarQubeEnv("SonarCloud") {
                     sh "${tool("SonarScanner")}/bin/sonar-scanner"
                  }
            }*/



    }
     
    stage ('Unit Tests') {
        echo "Running utPLSQL database Unit Tests"
      
    }
     
    stage ('Connect to App server') {
        echo "Provisioning a copy of the current Production database"
       /* sshagent(credentials : ['jenkins-pem']) {
        sh "echo pwd"
        sh 'ssh -t -t ubuntu@xx.xxx.xx.xx -o StrictHostKeyChecking=no "echo pwd && sudo -i -u root && cd /opt/docker/web && echo pwd"'
        }
        bat 'scp file.txt user@remote.host:/path/to/file.fmb'*/

    }
     
    stage ('Compile Form') {
        echo "Generating deployment script against Acceptance; Doing drift detection; Creating changes report"
        //sh "frmcmp  module=$AU_TOP/forms/US/scott_emp.fmb userid=apps/appspassword output_file=$PRODUCT_TOP/forms/USCUSTOM_OE.fmx module_type=form compile_all=yes"
    }
     
    stage ('Deploy to App Server') {
        echo "Deploying release to Acceptance database for user and performance testing"

    }
     
    stage ('Approval Gate'){
        def message = "Approve release to Production?"
 	
        // wrapping in a time out so it does not block the agent and simply fails the build if there is no user intervention.
        timeout(time: 30, unit: 'MINUTES') {
            def userInput = input(
                id: 'userInput',
                message: "$message",
                parameters: [
                  [$class: 'TextParameterDefinition', defaultValue: 'I Approve The Deployment', description: 'To Proceed, type I Approve The Deployment', name: 'Review deployment artifacts before proceeding']
                ]
            )
 
            if (userInput.indexOf('I Approve The Deployment') == -1) {
                currentBuild.result = 'ABORTED'
                error('Deployment aborted')
            }
        }
    }
     
    stage ('Deploy to Production') {
        echo "Deploying release to Production database"
 
    }
}
