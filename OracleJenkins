node('master') {
    // Variables to set
   
 
    stage ('SCM Checkout') {
        echo "Ensure the pipeline is configured to clean the Jenkins workspace before checkout"
        git branch: 'main', changelog: false, poll: false, url: 'https://github.com/akilagithub/OracleTechVersant.git'
    }
}
node('oracleapps'){
    
    stage ('Code Analysis') {
        
       /* echo "Migrating the project to a cleaned CI database; Running Code Analysis for Oracle; Checking for Invalid Objects"
            withEnv(["JAVA_HOME=$JavaHome"]) {      
                  withSonarQubeEnv("SonarCloud") {
                     sh "${tool("SonarScanner")}/bin/sonar-scanner"
                  }
            }*/



    }
     
    stage ('Unit Tests') {
        echo "Running utPLSQL database Unit Tests"
      
    }

    stage ('copying form to APPS TOP') {
        echo "Copying fmb from cloned location to respective top location"
        sh '''
           cp /data/apps/fs1/EBSapps/appl/po/12.0.0/workspace/OraclePipeline/OracleTechVersant/EMPFORM.fmb /data/apps/fs1/EBSapps/appl/au/12.0.0/forms/US/EMPFORM.fmb
           cd /data/apps/fs1/EBSapps/appl/au/12.0.0/forms/US
           mv EMPFORM.fmb EMPFORM_11183704.fmb
        '''
    }
    
    stage ('Setting environment') {
        echo "setting environment variable"
        sh '''
           cd /data/apps
           ./Casestudyapps.env
           cd /data/apps/fs1/EBSapps/appl && . *.*
        '''
        
    }
    stage ('Compile Form') {
        sh '''
        echo "Compiling the employee form"
        frmcmp_batch module=/data/apps/fs1/EBSapps/appl/au/12.0.0/forms/US/EMPFORM_11183704.fmb userid=apps/apps@VIS167 output_file=/data/apps/fs1/EBSapps/appl/po/12.0.0/forms/US/EMPFORM_11183704.fmx module_type=FORM compile_all=special batch=yes
        '''   
   }
     
 
     
    stage ('Approval Gate'){
        def message = "Approve release to Production?"
 	
        // wrapping in a time out so it does not block the agent and simply fails the build if there is no user intervention.
        timeout(time: 30, unit: 'MINUTES') {
            def userInput = input(
                id: 'userInput',
                message: "$message",
                parameters: [
                  [$class: 'TextParameterDefinition', defaultValue: 'I Approve The Deployment', description: 'To Proceed, type I Approve The Deployment', name: 'Review deployment artifacts before proceeding']
                ]
            )
 
            if (userInput.indexOf('I Approve The Deployment') == -1) {
                currentBuild.result = 'ABORTED'
                error('Deployment aborted')
            }
        }
    }
     
    stage ('Deploy to Production') {
        echo "Deploying release to Production database"
 
    }
}
